// LESSON 1 - MANIPULATING FILES AND DIRECTORIES 
/directory - directory from the root | 
directory - directory from the current path 
pwd - returns what current path are you in 
ls | ls home/path - lists the contents of your current directory whether be it files or directories 
cd | cd ..(go back) | cd directory(go forward) - move from one directory to another 
touch fileName - create a file 
cp original.txt duplicate.txt - creates a duplicate of a file 
cp original.txt backup - backup is a directory this means, copy the original.txt into backup directory 
mv original.txt ../directoryName/path - moving a file into another directory
mv original.txt newFileName.txt - renaming a file 
rm original.txt | can also be rm original.txt anotherfiletext.txt (multiple removal) - removing a file 
rmdir directoryName - remove a directory/folder, it only works if the directory is empty
mkdir directoryName - creatign a directory 

// LESSON 2 - MANIPULATING DATA INSIDE A FILE 
cat original.txt - produce all of the content of the file 
less original.txt - view and search text files | less -N original.txt - viewing the content line by line | :n for next page, q for quit 
head seasonal/summer.csv - view the first 10 lines | used for obvs selecting rows 
tail summer.csv - print the last 10 lines | used for obvs selecting rows 
cut - selecting columns 
cut -f 2-5, 8 -d , values.csv - means select columns 2 to 5 and 8, -f means field, comma is a separator for columns it is set by delimiter (-d ,)
grep molar winter.csv - select lines according to what they contain | in this case it would print the line that contains the word molar 
    -c: print a count of matching lines rather than the lines themselves
    -h: do not print the names of files when searching multiple files
    -i: ignore case (e.g., treat "Regression" and "regression" as matches)
    -l: print the names of files that contain matches, not the matches
    -n: print line numbers for matching lines
    -v: invert the match, i.e., only show lines that don't match
history - show list of commadns you have run recently 
!12 - run the 12th command from your history 
paste original1.txt original2.txt - merging two files content's 

// LESSON 2.5 - COMMAND FLAG 
head -n 50 summer.csv - display first 50 lines of codes | good practice to put command flag (e.g. -n) before fileName and after command (e.g. head)
press tab - for name autocompletion 
ls -R - show everything including the subdirectory 
lf -F -R home/repl - -f command flag pritns a / after the name of every directory and a * after the name of every runnable program | this specific command prints every directory under repl and all of its subdirectories 
man head - get help for a command specifeid, in this case head 

// LESSON 3 - COMBINING TOOLS 
head -n 5 summer.csv - prints the first 5 lines from summer.csv 
head -n 5 summer.csv > top.csv - save the command's output to top.csv , ">" tells the shell to redirect head's output to a file 
cut -f 2 -d , seasonal/summer.csv | grep -v Tooth - combining two commands with "|" , first it selects the column 2 from summer.csv file with comma as a way to specify the columns separation then find all of the lines that does not contain Tooth 
wc - prints the number of characters,words, and lines in a file, you select which to print by specifying -c or -w or -l 
    sample use case 
        wc -l season/spring.csv - returns how many lines in this file 
        grep 2017-07 spring.csv | wc -l - count how many lines from the result of your grepping 
cut -d , -f 1 seasonal/* - returns all of the columns from different files contained inside the seasonal directory 
sort -r fileText.txt | sort in reverse, default is alphabetical
    -n - use numerical values to sort 
uniq -c fileText.tx | only grab the uniq values and count them 
    best combined with: cut -f 2 -d , fileText.csv | grep -v Tooth | sort | uniq -c - this means grab items from column 2, sort them and grab only the unique values and count how many unique values 
head - just by merely typing this it waits for another input, to quit click ctrl + c

// LESSON 3.5 - WILDCARDS 
* - all 
? - e.g. 201?.txt will match 2017.txt or 2018.txt 
[...] - e.g. 201[78].txt matches 2017.txt or 2018.txt but not 2016.txt 
{...} - matches any of the comma-separated patterns inside e.g. {*.txt, *.csv} will match all files ending in .txt and .csv 
| - pipe, or it connects two command 
~ - user's home directory 
> - redirect output from a command to the specified file 


// LESSON 4 - BATCH PROCESSING 
echo hello world - echo means print, this would produce specific command line would output hello world 
echo $varialbe - print the value of variable 
variableName = variableValue - assigning a value to variable 
for variable in list; do echo $variable; done - looping, executing command over and over 
for file in seasonal/*.csv; do head -n 2 $file | tail -n 1; done - doing two commands in a single loop
mv 'July 2017.csv' '2017 July data.csv' - using single quotes or double quotes to make the shell interpret it as a single parameter
for f in seasonal/*.csv; do echo $f; head -n 2 $f | tail -n 1; done - loop thru all of seasonal files, print their names, print the first two row then print the last row of the first two (note: | is called pipeline, it connects the two command )

// LESSON 5 - COMBINING NEW TOOLS 
nano - like a best way to store commands, its a text editor btw 
shell script - file full of shell commands 
nano filename - open a file or create if it doesn't exist 
nano sample use case 
    nano dates.sh 
        inside it: cut -d , -f 1 seasonal/*.csv
        ctrl + o: saving file 
        ctrl + x: exit editor 
    bash dates.sh: this is to run the file 
passing filenames to script 
    if unique-lines.sh contains sort $@ | uniq
    when you run: bash unique-lines.sh seasonal/summer.csv 
    $@ would be replace by seasonal/summer.csv | you could also use $1, $2, ...
one shell script doing many things 
    nano filename.sh 
        wc -l $@ | grep -v tota | sort -n | head -n 1 
running script to multiple directories 
    bash range.sh seasonal/*.csv > range.out - place the output then to range.out
writing for loop, you could do it separated with semi colons or just space just like in python
    for filename in txt.csv 
    do 
        cut -d , -f 1 filename 
    done 
running script while adding a pipe - yes you could do this too 
    bash date-range.sh seasonal/*.csv | sort
common mistake 
    not providing a file 
        tail -n 3 - what would happen is it would wait until you specified a file name 
        head -n 5 | tail -n 3 somefile.txt - it would execute the tail but still wait for a filename for head, remember you're using a pipeline 

// LESSON X.1 - CONCLUSION 
1 - basic file and folder manipulation
2 - content of file manipulation, common command flags 
3 - grabbing the column, row, sorted, specific or unique values | wildcards like *,|,etc.
4 - printing with echo and using for loop cmd 
5 - using nano and bash 

// LESSON X.2 - LINUX COMMANDS 
sed - edit files with commands, with no need for a text editor 
    sed 's/unix/linux' test - s is for subsitute, meaning substitute the first word match for unix with linux 
    sed 's/unix/linux/2' test - substitute first 2 unix match with linux 
    sed 's/unix/linux/g' test - substitute all unix match with linux 
awk - for processing or analyzing text files - in particular, data files that are organized by lines(rows) and columns 
    awk '{print $1}' test.txt - print only the first column, replace 1 wiht 2 for 2nd column 
    awk '{print $NF}' test.txt - print the last values for all columns | its much better to use $3 if ever the last column is the 3rd column 